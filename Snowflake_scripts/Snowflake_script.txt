Step 1 : Create the destination table

CREATE or replace TABLE OTODOM_DATA_dump_short
(
    json_data  text
);

// We have to define the format of the data in file
Step 2 : Create the file format object

CREATE OR REPLACE FILE FORMAT CSV_FORMAT
  type = csv
  field_delimiter = ','
  field_optionally_enclosed_by='"';

// in snowflakes ,firstly we have to create the stage and load the data into the stage and after then we can load that data in to tables
STEP 3 : Create the internal stage object

CREATE OR REPLACE STAGE MY_CSV_STAGE_SHORT
  file_format=csv_format;


// Now load the local storage data in to stage , this can only be done with help of snowSQL command prompt 

Step 4 :
PUT file:///C:/Users/Anonymous/Documents/Project/Data_analysis/Dataset/Sample_ORG_Dataset_Part1/Otodom_Apartment_major_cities_dataset_ORG_JSON_Format_Part1.csv @MY_CSV_STAGE_SHORT;

PUT file:///C:/Users/Anonymous/Documents/Project/Data_analysis/Dataset/Sample_ORG_Dataset_Part2/Otodom_Apartment_major_cities_dataset_ORG_JSON_Format_Part2.csv @MY_CSV_STAGE_SHORT;

PUT file:///C:/Users/Anonymous/Documents/Project/Data_analysis/Dataset/Sample_ORG_Dataset_Part3/Otodom_Apartment_major_cities_dataset_ORG_JSON_Format_Part3.csv @MY_CSV_STAGE_SHORT;

Step 5 :

COPY INTO OTODOM_DATA_DUMP_SHORT
FROM @MY_CSV_STAGE_SHORT;


step 6: Confirmation

SELECT COUNT(1) FROM OTODOM_DATA_DUMP_SHORT; -- Should be 62816 records.

SELECT PARSE_JSON(json_data):price FROM OTODOM_DATA_dump_short limit 5; -- Should return just the Price field

SELECT json_data:price FROM OTODOM_DATA_dump_short limit 5; -- This will throw error since the field is text but has JSON format data hence need to use PARSE_JSON function to parse the JSON data in this field as shown in above query.


Step 7 : flattern the data and load in to a new table

CREATE OR REPLACE table otodom_data_short_flatten
as
select row_number() over(order by title) as rn
, x.*
from (
select replace(parse_json(json_data):advertiser_type,'"')::string as advertiser_type
, replace(parse_json(json_data):balcony_garden_terrace,'"')::string as balcony_garden_terrace
, regexp_replace(replace(parse_json(json_data):description,'"'), '<[^>]+>')::string as description
, replace(parse_json(json_data):heating,'"')::string as heating
, replace(parse_json(json_data):is_for_sale,'"')::string as is_for_sale
, replace(parse_json(json_data):lighting,'"')::string as lighting
, replace(parse_json(json_data):location,'"')::string as location
, replace(parse_json(json_data):price,'"')::string as price
, replace(parse_json(json_data):remote_support,'"')::string as remote_support
, replace(parse_json(json_data):rent_sale,'"')::string as rent_sale
, replace(parse_json(json_data):surface,'"')::string as surface
, replace(parse_json(json_data):timestamp,'"')::date as timestamp
, replace(parse_json(json_data):title,'"')::string as title
, replace(parse_json(json_data):url,'"')::string as url
, replace(parse_json(json_data):form_of_property,'"')::string as form_of_property
, replace(parse_json(json_data):no_of_rooms,'"')::string as no_of_rooms
, replace(parse_json(json_data):parking_space,'"')::string as parking_space
from OTODOM_DATA_DUMP_SHORT 

) x;


Step 8 : Now we required some transaformation on the data 

As we got the location column in latitude and longitude -- we need to transform and fetch the location

to do this we have to download some requirement -- prefer requirement.txt







==> Check if any test data is loaded using below query:

SELECT * FROM otodom_data_flatten where url is null;

==> Delete such records. Probably could be 1 such test record.

DELETE from otodom_data_flatten where url is null;



---------------------------------------------------
       LOAD CSV to SNOWFLAKE - ADDRESS TABLE
---------------------------------------------------

1) Create the destination table:

CREATE TABLE OTODOM_DATA_ADDRESS_FULL
(
    rn   int,
    location  text,
    address  text
);



2) Create a file format object for CSV file:

CREATE OR REPLACE FILE FORMAT CSV_FORMAT
  type = csv
  field_delimiter = ','
  field_optionally_enclosed_by='"';



3) Create an internal stage:

 CREATE OR REPLACE STAGE MY_CSV_STAGE
  file_format=csv_format;



4) Load csv file data to internal stage. Please note, below PUT command can only be run from SNOWSQL (Command line prompt os Snowflake).

PUT file:///C:\Users\Anonymous\Documents\Project\Data_analysis\Address_Title\Address_Title\Otodom_Apartment_major_cities_dataset_Address.csv @my_csv_stage


5) Load data from stage to table:

COPY INTO OTODOM_DATA_FLATTEN_ADDRESS_FULL
from @my_csv_stage;


6) Verify the data:

SELECT * FROM OTODOM_DATA_ADDRESS_FULL;



----------------------------------------------------
Transformation of Title column ( polish to English)
----------------------------------------------------

Now we need to transform the title columns which is in polish language in to English 

1. we can do this by Python , but due to API call restriction it would be hard , so we will do this by google sheets API 

steps to follow : GO to Google developer console and create a new project

step 2 : Give project name -> Create 

Now go to API and service ->Library -> search google sheets API -> Enable

project -> Keys -> add key -> create new key -> down and rename it with service_account and put it in the ~/APP_DATA/gspread 

RUN Python Script: C:\Users\Anonymous\Documents\Project\Data_analysis\Scripts\Python_scripts\Transalate_Data.py --- run this scripy it will translate 
for loading 
RUN another python script : C:\Users\Anonymous\Documents\Project\Data_analysis\Scripts\Python_scripts\load_translateData_to_otodom.py


LOAD Otodom_Apartment_major_cities_dataset_Translate.csv data from local in to snowflake 

CREATE TABLE OTODOM_DATA_FLATTEN_TRANSLATE_FULL
(
    rn   int,
    title  text,
    title_eng  text
);


CREATE OR REPLACE STAGE MY_CSV_STAGE_TRANS
  file_format=csv_format;


PUT file:///C:\Users\Anonymous\Documents\Project\Data_analysis\Address_Title\Address_Title\Otodom_Apartment_major_cities_dataset_Translate.csv @MY_CSV_STAGE_TRANS;


COPY INTO OTODOM_DATA_FLATTEN_TRANSLATE_FULL
from @MY_CSV_STAGE_TRANS;


SELECT * FROM OTODOM_DATA_FLATTEN_TRANSLATE_FULL;






------------
Last step : 
-------------
Now you have the 3 tables:
       ==> OTODOM_DATA_FLATTEN - Contains original flattened Otodom dataset.
       ==> OTODOM_DATA_FLATTEN_ADDRESS_FULL - Contains address for all locations coordinates.
       ==> OTODOM_DATA_FLATTEN_TRANSLATE - Contains english translated title.


Using the above 3 tables, create a new tables as mentioned below.
This will also create a new column "APARTMENT_FLAG" which can be used to determine if the property ad is for an apartment or for a non apartment (like office space, commercial buildings etc)


CREATE OR REPLACE TABLE OTODOM_DATA_TRANSFORMED
as
with cte as 
    (select ot.*
    , case when price like 'PLN%' then try_to_number(replace(price,'PLN ',''),'999,999,999.99')
           when price like '€%' then try_to_number(replace(price,'€',''),'999,999,999.99') * 4.43
      end as price_new
    , try_to_double(replace(replace(replace(replace(surface,'m²',''),'м²',''),' ',''),',','.'),'9999.99') as surface_new
    , replace(parse_json(addr.address):suburb,'"', '') as suburb
    , replace(parse_json(addr.address):city,'"', '') as city
    , replace(parse_json(addr.address):country,'"', '') as country
    , trans.title_eng as title_eng
    from otodom_data_flatten ot 
    left join otodom_data_flatten_address_full addr on ot.rn=addr.rn 
    left join otodom_data_flatten_translate_full trans on ot.rn=trans.rn)
select *
, case when lower(title_eng) like '%commercial%' or lower(title_eng) like '%office%' or lower(title_eng) like '%shop%' then 'non apartment'
       when is_for_sale = 'false' and surface_new <=330 and price_new <=55000 then 'apartment'
       when is_for_sale = 'false' then 'non apartment'
       when is_for_sale = 'true'  and surface_new <=600 and price_new <=20000000 then 'apartment'
       when is_for_sale = 'true'  then 'non apartment'
  end as apartment_flag
from cte;



Now you data is completly megered and Now visit 
